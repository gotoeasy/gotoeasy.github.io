[view]
<div>
    <ui-navbar />
    <ui-sidemenu />
    <div class="main">
        <ui-blockquote text="简介"/><br>
        问：简单介绍下rpose<br>
        答：说来话长，就算是个前端框架吧<br>

        <br>
        问：为何放着angular、react、vue等不用，还要造轮子？<br>
        答：angular太复杂，react的jsx难以忍受，vue指令太多，(回答像是有点假) ......<br>
        
        <br>
        问：能写得比它们还好？<br>
        答：能写得更加舒服<br>

        <br>
        问：rpose有什么特点？<br>
        答：精致（精力有限简化导致^_^）、更少的概念、更多的便易、换取更多的精力关注业务实现<br>

        <br>
        问：有实际例子吗？<br>
        答：本文就是用rpose写的，往下看了解更多<br>


        <br>
        <br>
        <ui-blockquote text="1.0 基于Block-Text-File的源码格式"/>
        代码文件基于Block-Text-File格式，为了简化，不使用其中的多文档功能<br>
        Block-Text-File格式定义详见 <a href="https://github.com/gotoeasy/block-text-file" target="_blank">链接</a><br>
        <br>
        大体形同ini文件，易读性高，就像下面这个
```btf
\[abc] // 块名后的内容自动忽略，可作注释用途
NNNNNNNNNNNNNN
NNNNNNNNNNNNNNNN
NNNNNNNNNNNNNNNNNNN

\[def]
NNNNNNNNNNNNNN
NNNNNNNNNNNNNNNNNNN
NNNNNNNNNNNNNNNN
\--------- 这里用9个半角减号作为块结束行，代表[abc]的内容已结束
// 结束后的内容会被忽略，作为代码文件用途也就形同注释用了

更详尽的格式定义，详见 https://github.com/gotoeasy/block-text-file
```

        <br>
        <ui-blockquote text="1.1 组件式开发，一个组件对应一个文件"/>
        流行习惯，rpose简化的把一切都作组件看待，比如页面也是组件<br>
        代码文件目录组织上，可设定组件目录，主要是为了区分页面，因为页面最终是要打包的<br>
        <br>
        更多具体内容，详见工程配置<br>

        <br>
        <ui-blockquote text="1.2 约定的文本块写法"/>
        rpose常用块名有[api]、[view]、[options]、[state]、[actions]、[css]、[mount]等<br>
        注：当前版本尚未稳定，块名可能调整<br>
        <br>
        块名用途分别说明如下
```btf
\[api] // 用于声明组件接口特征
// 就像写配置文件一样任性
optionkeys = value, disabled, onclick   // 允许配置的属性
statekeys  = value, disabled            // 允许修改的状态属性
```
```btf
\[view] // 写视图模板，亲近html标签的写法
<div>
    <span>Hello {$state.name}, I am {$options.name}.</span>
    <ui-button value="确定" onclick="fnClick" />
</div>
\---------
// 模板语法简要
直接写js代码： {% /* 这里写代码 */ %}
默认转义特殊字符的表达式： {theVar}
不做转义处理的表达式： {=theVar}
比如
{% if (条件) { %}
<div>{name}</div>
{% } %}
```
```btf
\[options] // 写默认选项数据，通常是一经设定就不会修改的内容
{
    name: 'rpose'
}
```
```btf
\[state] // 写默认状态数据，通常是可以被修改的内容
{
    name: ''
}
```
```btf
\[actions] // 写事件响应函数，如按钮点击等
{
    // 响应“确定”按钮点击事件，通过view中onclick的设定进行关联
    fnClick: e => {
        console.info("点击了按钮", e);
    }
}
```
```btf
\[css] // 写样式表
.my-class{
    color: 'red'
}
```
```btf
\[mount] // 本组件挂载点，常用于页面显示
body
```
没错，还可以写[less]、[scss]等，不止于此<br>

        <br>
        <ui-blockquote text="1.3 小结"/>
        通过本章节，对rpose的代码结构有个初步了解<br>
        实现效果放一边，意会下rpose的姿势优劣，感兴趣或有共鸣，随时继续下一章
        <p/>

    </div>
    <hr>
    青松 2018.12
    <p/>
</div>

[mount]
body


[css]
body{
	margin: 0;
    background-color: #F9F9F9;
}

.main{
	margin: 15px;
}

.blockquote{
    border-left: 5px solid red;
    margin: 10px 0 0 0;
    font-size: 1.3rem;
    padding: 0 0 5px 5px;
}

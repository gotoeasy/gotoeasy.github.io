[view]
<div @class="box-sizing--border-box padding-0_20px_20px_20px">

    <doc-title>安装使用</doc-title>
    目前rpose是采用命令行方式进行编译打包<br>
    node.js环境，npm全局安装命令行工具，参数有限一目了然


<!---------------------------------------------------------------------------------------->
    <doc-title>3.1 安装rpose命令行工具</doc-title>
```
npm i -g @rpose/cli
```

<!---------------------------------------------------------------------------------------->
    <doc-title>3.2 克隆本网页项目进行体验</doc-title>
    本网页效果都看了，怎么写的，下载下来直观的试试看<br>
    本地建个目录，克隆<ui-badge>https://github.com/gotoeasy/gotoeasy.github.io.git</ui-badge><br>
    假设克隆到目录<ui-badge>D:/test</ui-badge>，应该有文件<ui-badge>D:/test/rpose.config.btf</ui-badge>，以及<ui-badge>D:/test/src</ui-badge>这样的目录<br>
    <br>
    命令行，准备开始
```
// 进入项目目录
cd D:/test

// 准备开始，初次启动，需要给点耐心，不出意外必定成功
// 用watch模式比较直观，加上-clean是先清除build目录，方便看新生成的东西
rpose watch -clean
```
成功后是打开了浏览器显示了首页，接下去就可以对照源码看看<ui-badge>build</ui-badge>目录中的东西了


<!---------------------------------------------------------------------------------------->
    <doc-title>3.3 其实应该先看配置</doc-title>
    项目根目录下的配置文件<ui-badge>rpose.config.btf</ui-badge>，内容简单直白，但很关键<br>
```btf
// 项目配置文件 rpose.config.btf

\[path]
build               : build
build_dist_images   : images           // 图片文件打包后的存放目录(默认images)

\[theme] // 样式风格包
rpose-theme-demo

\[prerender] // 预渲染包
@gotoeasy/pre-render

\[csslib]
normalize = normalize.css:normalize.css
```

其中的<ui-badge>[csslib]</ui-badge>是个样式库配置，rpose的一大特性，后有专门章节介绍<br>
配置文件并不是必须的，没有配置文件时会使用最基本的缺省设定


<!---------------------------------------------------------------------------------------->
    <doc-title>3.4 另一个重要的配置文件</doc-title>
    另一个重要的配置文件是根目录下的<ui-badge>.browserslistrc</ui-badge>，配置目标浏览器<br>
```properties
// 目标浏览器配置文件 .browserslistrc

# 在线查询 https://browserl.ist

# 全球市场份额2%以上
 >= 1%
# 中国市场份额1%以上
 >= 1% in cn
# 市场份额不足0.5%或2年内未升级的除外
 not dead

# 包含特定版本
chrome > 70
# firefox > 60
ie 11
```

根据需要而改吧，但ie已经不好找了，基本是淘汰的状态，可能会测试不足有问题，谨慎使用


<!---------------------------------------------------------------------------------------->
    <doc-title>3.5 可以打包了</doc-title>
    我们要的打包效果是，按页面单位有文件<ui-badge>html、js、css</ui-badge>各一个，图片资源等哈希后放单独目录<br>
    公共包抽取按需加载之类暂时不考虑，目前打包出来的文件实在是太小还不值得分<br>
    (好不容易决定SPA，结果导致打包文件太大又要拆分，这到底是哪跟哪的事情)
```
rpose build -c -r
```

这里并没有提到打包的什么配置<br>
因为，要打包，理论上给的需求已经充分，好了，让它跑起来吧

<!---------------------------------------------------------------------------------------->
    <doc-title>小结</doc-title>
    效果摆在那里，小结已是多余，在此鸣谢众多开源项目及其作者<br>
    <br>
    鸣谢npm平台，确实方便了大家<br>
    鸣谢babel，7.x版本令人愉悦<br>
    鸣谢core-js，庞大的苦活，辛苦了<br>
    鸣谢browserify，做得不错，就是缺个sync<br>
    鸣谢postcss，干得漂亮<br>
    鸣谢browserslist，要的就是这效果<br>
    鸣谢acorn，这是真技术<br>
    ...<br>
    ...<br>
    ...<br>
    不罗列鸣谢过意不去，一旦罗列又必定有漏，虽有漏，但内心感激，赞<br>

   
    <doc-footer>青松 2018.12</doc-footer>

</div>

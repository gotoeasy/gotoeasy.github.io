[view]
<div @class="box-sizing--border-box padding-0_20px_20px_20px">

    <doc-title>图标库</doc-title>
    图标基本上是以SVG为主了，通常，是到图标网站搜索图标、注册用户、下载、本地整理．．．等等步骤，终于拿下，然后，然后下回继续重复<br>
    <br>
    <ui-badge>{'<svgicon>'}</ui-badge>就是为减少这些重复劳动而来，是个透明化使用svg图标的组件<br>
    <br>
    概念上，是把本地或npm上的svg图标集视为图标库<br>
    要做的事，仅仅只是声明索用<br>
    <br>
    最终效果，就是按需引用了相应图标<br>
    中间过程，透明化，全部代劳

<!---------------------------------------------------------------------------------------->
    <doc-title>1.1 引用npm包中的SVG</doc-title>
    典型的就是使用fontawesome图标<br>
    需要知道包名，得清楚svg图标的目录及文件名
```rpose
// demo-svgicon-d1.rpose
\[view]
<svgicon name="@fortawesome/fontawesome-free:angular"/> <!-- 通常，如果svg文件名没有重复，那只需要直接写文件名就行，有意义的文件名能达到很好的语义化效果 -->

\[mount]
body
```

    使用简单，在<ui-badge>{'<svgicon>'}</ui-badge>上指定<ui-badge>name</ui-badge>属性就行<br>
    有了包名，有了合适的文件过滤条件，就能找到唯一的svg图标文件，就能生成一个svg标签，显示一个图标，看效果 <a href="demo/demo-svgicon-d1.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    <br>
    这里的name属性值，<ui-badge type="info">格式为</ui-badge><ui-badge>pkg</ui-badge>:<ui-badge>svgfilter</ui-badge><br>
    <ui-badge>svgfilter</ui-badge>过滤器可以使用通配符，单一<ui-badge>?</ui-badge>代表文件名的任意一个字符，单一<ui-badge>*</ui-badge>代表任意文件名，两个<ui-badge>**</ui-badge>代表任意目录任意文件名<br>
    <br>
    <ui-badge type="danger">注意</ui-badge><ui-badge>svgfilter</ui-badge>必须要能找到唯一的svg图标文件，找不到或找到多个都会编译失败<br>
    比如这个包里就有regular和solid目录，包含一些相同的svg文件名，如果想用，就需要加目录过滤条件，比如<ui-badge>solid/clock</ui-badge><br>
    <br>
    （如何修改显示方式，待后面说明）



<!---------------------------------------------------------------------------------------->
    <doc-title>1.2 直接引用本地SVG</doc-title>
    已有一个svg图标文件，想要直接用起来？<br>
    同样是在<ui-badge>{'<svgicon>'}</ui-badge>上指定<ui-badge>name</ui-badge>属性
```rpose
// demo-svgicon-d2.rpose
\[view]
<svgicon name="chart"/> <!-- chart.svg 放在 demo-svgicon-d1.rpose 同一目录 -->

\[mount]
body
```

    这种情况的name属性，就是以相对路径的方式，直接去查找文件，能省略svg后缀名但不支持通配符，看效果 <a href="demo/demo-svgicon-d2.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    <br>
    由于这里的name属性值不可能包含<ui-badge>:</ui-badge>这个特殊字符，所以能直观的区别于npm包的引用方式，因此设计上仍旧还是使用name属性，以简化组件接口，简化用法<br>
    <ui-badge type="danger">注意</ui-badge>非npm包引用方式时，优先以相对路径方式直接查找文件


<!---------------------------------------------------------------------------------------->
    <doc-title>1.3 按配置目录引用SVG</doc-title>
    工程上，为了统一管理，通常会配置图标目录<br>
    怎么引用工程上配置的图标目录下的指定svg文件？<br>
    还是使用<ui-badge>{'<svgicon>'}</ui-badge>上的<ui-badge>name</ui-badge>属性，看效果 <a href="demo/demo-svgicon-d3.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
```rpose
// demo-svgicon-d3.rpose
\[view]
<svgicon name="example"/> <!-- example.svg 在工程内的 resources/svgicons 目录 -->

\[mount]
body
```

    <ui-badge type="info">区别1</ui-badge>简单的说，就是次优先查找配置目录<br>
    <ui-badge type="info">区别2</ui-badge>工程配置目录中的svg文件，是被设计为按<ui-badge>文件过滤器</ui-badge>方式查找，这是为了避免和相对路径方式混淆，更是为了方便仅书写文件名<br>
    <br>
    管理上，配置目录中可以建子目录分级管理，如果没有重复文件名，那<ui-badge>{'<svgicon>'}</ui-badge>可以只写文件名，很舒服<br>
    <br>
    工程上配置个图标目录（默认resources/svgicons），放置svg图标文件，都起不重复的有意义的文件名，这种情况下用<ui-badge>{'<svgicon>'}</ui-badge>能达到语义非常清晰的效果<br>


<!---------------------------------------------------------------------------------------->
    <doc-title>1.4 引用内置SVG图标</doc-title>
    内置包<ui-badge>@rpose/buildin</ui-badge>中提供部分常用图标<br>
    用法是一样的，看效果 <a href="demo/demo-svgicon-d4.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
```rpose
// demo-svgicon-d4.rpose
\[view]
<svgicon name="home"/> <!-- home.svg 在内置包@rpose/buildin中 -->

\[mount]
body
```

    <ui-badge type="info">区别</ui-badge>是查找优先度不同，这是最低优先度<br>
    也是按<ui-badge>文件过滤器</ui-badge>方式查找<br>
    内置支持，所以不需要写包名<br>
    <br>
    还找不到呢？编译报错

<!---------------------------------------------------------------------------------------->
    <doc-title>1.5 修改图标显示效果</doc-title>
    默认是以<ui-badge>{'<svg>'}</ui-badge>标签的方式显示<br>
    可以直接通过相应属性修改显示效果
```rpose
// demo-svgicon-d5-1.rpose
\[view]
<div @class="height-50vh display-flex justify-content-center align-items-center">
    <svgicon name="404" fill="#dc483d" height="128"/>
</div>

\[mount]
body
```

    这个例子就是直接修改<ui-badge>fill</ui-badge>属性，并自定义高度，看效果 <a href="demo/demo-svgicon-d5-1.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    <br>
    通过样式控制当然也是可以的，比如下面这样 <a href="demo/demo-svgicon-d5-2.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>

```rpose
// demo-svgicon-d5-2.rpose
\[view]
<div @class="height-50vh display-flex justify-content-center align-items-center">
    <svgicon name="404" class="icon404"/>
</div>

\[css]
.icon404{
    fill: darkgoldenrod;
    height: 200px;
}

\[mount]
body
```

<!---------------------------------------------------------------------------------------->
    <doc-title>1.6 按内联symbol定义方式显示</doc-title>
    不同方式有不同的特点<br>
    如果想内联按use/symbol方式显示，需指定<ui-badge>type</ui-badge>属性 <a href="demo/demo-svgicon-d6.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
```rpose
// demo-svgicon-d6.rpose
\[view]
<div>
    <svgicon name="chart" height="64" type="inline-symbol"/>
    <svgicon name="example" height="64" type="inline-symbol"/>
    <svgicon name="home" height="64" fill="#fff" type="inline-symbol"/>
    <svgicon name="404" height="64" type="inline-symbol"/>
</div>

\[mount]
body
```

    目前type共三种方式可选：<br>
    <ui-badge type="info">1</ui-badge>直接内联<ui-badge>svg</ui-badge>（缺省时默认）<br>
    <ui-badge type="info">2</ui-badge>内联symbol定义<ui-badge>inline-symbol</ui-badge><br>
    <ui-badge type="info">3</ui-badge>外部symbol定义<ui-badge>link-symbol</ui-badge><br>
    <br>
    各有长短，按需选用


<!---------------------------------------------------------------------------------------->
    <doc-title>1.7 按外部symbol定义方式显示</doc-title>
    有时想把symbol定义作成外部链接文件使用<br>
    就是symbol定义在单独文件，需要请求取得<br>
    这时<ui-badge>type</ui-badge>属性就设定为<ui-badge>link-symbol</ui-badge>，看效果 <a href="demo/demo-svgicon-d7.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
```rpose
// demo-svgicon-d7.rpose
\[view]
<div>
    <svgicon name="dashboard" height="64" fill="blue" type="link-symbol"/>
    <svgicon name="bug" class="icon-bug" type="link-symbol"/>
    <svgicon name="example" height="64" fill="deeppink" type="link-symbol"/>
    <svgicon name="@fortawesome/fontawesome-free:angular" height="64" type="link-symbol"/>
</div>

\[css]
.icon-bug{
    fill: red;
    height: 64px
}

\[mount]
body
```

    这种外部symbol定义的使用方式<br>
    用法背后的意图，其实比较微妙<br>
    


<!---------------------------------------------------------------------------------------->
    <doc-title>1.8 外部symbol定义带表达式</doc-title>
    直接内联以及内联symbol定义，都是要在编译时确定图标文件，都不支持表达式<br>
    而外部symbol定义，是单个文件包含了多个图标定义，所以得支持表达式，要能动态显示<br>
```rpose
// demo-svgicon-d8.rpose
\[view]
<div>
    <svgicon name="{'@fortawesome/fontawesome-free:apple'}" height="64" type="link-symbol"/>
    <svgicon name="{'dashboard'}" height="64" fill="deeppink" type="link-symbol"/>
    <svgicon name='@fortawesome/fontawesome-free:android' height="64" type="link-symbol"/>
</div>

\[mount]
body
```

    效果是apple不显示，另两个能显示，看看 <a href="demo/demo-svgicon-d8.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    <br>
    <ui-badge type="danger">有微妙</ui-badge><br>
    因为apple在npm包中，由于使用了表达式，所以编译时无法确定该图标会被使用，不会去定义它，这是一个微妙点<br>
    使用表达式的dashboard能找到，是因为它在工程配置的图标目录中，既然是要用外部symbol定义，那应该是有图标范围的，rpose认为配置的图标目录中的全部图标都是，这是第二个微妙点<br>
    上面没用表达式的android，编译时能确定，所以也是属于定义范围，这是第三个微妙点<br>
    <br>
    具体可查看生成的symbol定义文件


<!---------------------------------------------------------------------------------------->
    <doc-title>小结</doc-title>
    本节介绍了<ui-badge>{'<svgicon>'}</ui-badge>组件的用法<br>
    把众多svg图标文件视为图标库，声明式的使用它们，透明化中间过程<br>
   
    <doc-footer>Rpose Documents | <a href="https://github.com/gotoeasy/rpose/blob/master/LICENSE" style="text-decoration:none">MIT License</a></doc-footer>

</div>

[view]
<div @class="box-sizing--border-box padding-0_20px_20px_20px">

    <doc-title>预渲染</doc-title>
    通常页面是js生成，在html里只是引用了js脚本<br>
    有时需要在html里做点事情，加个Loader或骨架屏，或写搜索引擎关键词之类<br>
    这些可以通过预渲染实现<br>



<!---------------------------------------------------------------------------------------->
    <doc-title>1.1 先看打包好的页面文件源码</doc-title>
    这是个html文件源码，内容比较简单，有个缓存时间，js按defer方式下载执行<br>
    如果js文件比较大，可能会出现页面空白期，体验比较单调乏味<br>
```html
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="Cache-Control" content="max-age=18000"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script src="./index.js" defer></script>
<link href="./index.css" rel="stylesheet">
</head>
<body></body>
</html>
```

可以添加个Loader，缺点是不知道要“等”多久，时间长时体验较差<br>
或是加个骨架屏，缺点是不同页面的骨架屏可能不一样，要分别写<br>
或是参考桌面应用写个类似舒服的Splash启动页面，个性化，等等<br>
追根到底是审美疲劳的原因，看多了还会继续想换花样<br>
<br>
所以这个页面html源码的生成，自然的就有模块需求了


<!---------------------------------------------------------------------------------------->
    <doc-title>1.2 默认预渲染模块</doc-title>
    在rpose中，预渲染是由生成html源码的模块负责<br>
    这个生成过程是个函数，一个npm包，默认为<ui-badge>@gotoeasy/pre-render</ui-badge>
```js
// @gotoeasy/pre-render

// 传入源文件信息选项opts
//   - srcPath，如 c:/test/project/src
//   - file，绝对路径，如 c:/test/project/src/pages/demo-page.rpose
//   - name，单纯文件名，如 demo-page
//   - type，源文件中声明的预渲染类型，字符串如空白串''、loader、loader-section等
//   - inlinesymbols，内联svg-symbol代码
module.exports = function defaultPreRender(opts){
    ...
}
```

这个<ui-badge>@gotoeasy/pre-render</ui-badge>是默认的，更复杂的需求，可能要定制个npm包来用<br>
比如要填上关键字给搜索引擎啊、js/css想加个特别的版本号参数啊等等<br>

<br>
定制预渲染器需要配置：
```btf
// rpose.config.btf

\[prerender] // 预渲染器的npm包名，定制时替换掉就行
@gotoeasy/pre-render
```


<!---------------------------------------------------------------------------------------->
    <doc-title>1.3 不定制，就想加个Loader看效果</doc-title>
    一句话的事
```btf
// 文件名 demo-prerender-d3.rpose
\[api]
prerender = loader-section  // 就是这里，目前有loader和loader-section两种效果可选，一试便知

\[view] // 图片相对路径是相对于源文件自身，也可以用绝对路径
<img src="../resources/images/bg.jpg" height="100" width="200" />

\[mount]
body
```
点击看看效果 <a href="demo/demo-prerender-d3.html" target="_blank"><svgicon name="link" fill="blue"/></a>，相应的html会在body里会添加预渲染的相关<ui-badge>pre-render</ui-badge>节点<br>
详细查看build目录中生成的html文件内容便知


<!---------------------------------------------------------------------------------------->
    <doc-title>1.4 简单好用，定制要注意什么</doc-title>
在浏览器触发<ui-badge>window.onload</ui-badge>事件时<br>
rpose会按类名查找<ui-badge>.pre-render</ui-badge>节点，然后添加类<ui-badge>loaded</ui-badge><br>
再数秒后，会删除<ui-badge>.pre-render</ui-badge>节点，这就是框架内部做的事<br>
<br>
所以，预渲染的根节点添加类<ui-badge>pre-render</ui-badge>，再写个<ui-badge>.loaded</ui-badge>的相关样式，做隐藏或动画隐藏处理<br>
这样rpose就会代劳隐藏和删除逻辑，<ui-badge>@gotoeasy/pre-render</ui-badge>就是这么做的<br>
<br>
当然，也可以不管这些，自己写脚本实现是完全可以的<br>
另外注意，渲染效果的浏览器兼容性，目前是要自行处理的<br>


<!---------------------------------------------------------------------------------------->
    <doc-title>小结</doc-title>
    内置提供一种简易的预渲染方案，特殊需求再另行实现，是这样的一个思路<br>
    无关业务的东西，希望声明一下就能实现，这是主要目的<br>
    <br>
    另外，样式的link标签也是阻塞渲染的，如果css文件较大，也应异步加载，比如可以动态创建link标签实现<br>

   
    <doc-footer>Rpose Documents | <a href="https://github.com/gotoeasy/rpose/blob/master/LICENSE" style="text-decoration:none">MIT License</a></doc-footer>

</div>

[view]
<div @class="box-sizing--border-box padding-0_20px_20px_20px">

    <doc-title>初识 rpose</doc-title>
    问：简单介绍下rpose<br>
    答：说来话长，就算是个前端框架吧<br>

    <br>
    问：为何放着angular react vue等不用，还要造轮子？<br>
    答：angular太复杂，react的jsx难以忍受，vue指令太多，(回答像是有点假) ......<br>
    
    <br>
    问：能写得比它们还好？<br>
    答：rpose是<ui-badge>“面向姿势”</ui-badge>编程，远离颈椎病<br>

    <br>
    问：rpose有什么特点？<br>
    答：精致（精力有限简化导致）、更少的概念、更多的便易、换取更多的精力关注业务实现<br>

    <br>
    问：rpose主要适用于什么类型的项目？<br>
    答：目前是WEB，适用于你所擅长的项目<br>

    <br>
    问：使用rpose需要什么技能？<br>
    答：要求基础，不必技能，三驾马车<ui-badge>HTML/JS/CSS</ui-badge>大体就够了<br>

    <br>
    问：有实际例子吗？<br>
    答：本文档使用rpose写成，往下看了解更多<br>


<!---------------------------------------------------------------------------------------->
    <doc-title>1.1 基于Block-Text-File的源码格式</doc-title>
    代码基于<ui-badge>Block-Text-File</ui-badge>格式，格式定义链接 <a href="https://github.com/gotoeasy/block-text-file" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    出于简化目的不使用其中的多文档功能，所以源码文件的后缀名统一为<ui-badge>.rpose</ui-badge>，以示区别<br>
    <br>
    <ui-badge type="info">特点</ui-badge>有声明式特征，人性化、易读性高，如下所示
```rpose
\[foo] // 块名后的内容自动忽略，可作注释用途
NNNNNNNNNNNNNN
NNNNNNNNNNNNNNNN
NNNNNNNNNNNNNNNNNNN

\[bar]
NNNNNNNNNNNNNN
NNNNNNNNNNNNNNNNNNN
NNNNNNNNNNNNNNNN
\--------- 这里用9个半角减号作为块结束行，代表[bar]的内容已结束
// 结束后的内容会被忽略，作为代码文件用途也就形同注释用了

更详尽的格式定义，详见 https://github.com/gotoeasy/block-text-file
```



<!---------------------------------------------------------------------------------------->
    <doc-title>1.2 组件式开发</doc-title>
    沿用习惯，rpose简化的把一切都作组件看待，比如页面也是组件<br>
    一个组件对应一个<ui-badge>.rpose</ui-badge>源文件<br>
    <br>
    鉴于文件管理习惯，另有如下规则
    <br>
    <ui-badge type="info">规则1</ui-badge>源文件所在路径包含<ui-badge>components</ui-badge>目录的，都视为单纯组件<br>
    <ui-badge type="info">规则2</ui-badge>源文件名内不含<ui-badge>[mount]</ui-badge>声明的，都视为单纯组件<br>
    <ui-badge type="info">规则3</ui-badge>源文件所在路径不含<ui-badge>components</ui-badge>且内容中有<ui-badge>[mount]</ui-badge>声明的，都视为页面组件，工程内的全部页面组件最终都将被打包成页面<br>
    <ui-badge type="info">规则4</ui-badge>源文件名不能重复，如果同一工程内不同目录间有同名文件，仅其中一个有效<br>
    <ui-badge type="info">规则5</ui-badge>源文件名有限制，仅能使用字母数字减号下划线<ui-badge>[a-zA-Z0-9_-]</ui-badge>，且必须以字母开头，若文件名不符规则该文件将被忽略<br>

   

<!---------------------------------------------------------------------------------------->
    <doc-title>1.3 约定的文本块写法</doc-title>
    rpose常用块名有<ui-badge>[api]</ui-badge>、<ui-badge>[view]</ui-badge>、<ui-badge>[options]</ui-badge>、<ui-badge>[state]</ui-badge>、<ui-badge>[actions]</ui-badge>、<ui-badge>[css]</ui-badge>、<ui-badge>[mount]</ui-badge>等<br>
    <ui-badge type="danger">注</ui-badge>块名可能会因版本升级而调整，注意版本差异<br>
    <br>
    块名用途分别说明如下

```rpose
\[api] // 用于声明组件接口特征，就像写配置文件一样任性
optionkeys = value, disabled, onclick   // 允许配置的属性
statekeys  = value, disabled            // 允许修改的状态属性
```
```rpose
\[view] // 写视图模板，亲近html标签的写法
<div>
    <span>Hello {$state.name}, I am {$options.name}.</span>
    <ui-button value="确定" onclick="fnClick" />
</div>
\---------
// 模板语法简要
表达式： {expr}
比如
<div>{name}</div>
```
```rpose
\[options] // 写默认选项数据，通常是一经设定就不会修改的内容
{
    name: 'rpose'
}
```
```rpose
\[state] // 写默认状态数据，通常是可以被修改的内容
{
    name: ''
}
```
```rpose
\[actions] // 写事件响应函数，如按钮点击等
{
    // 响应“确定”按钮点击事件，通过view中onclick的设定进行关联
    fnClick: e => {
        console.info("点击了按钮", e);
    }
}
```
```rpose
\[css] // 写样式表
.my-class{
    color: 'red'
}
```
```rpose
\[mount] // 本组件挂载点，用于页面显示
body
```
没错，还可以写<ui-badge>[less]</ui-badge>、<ui-badge>[scss]</ui-badge>等，不止于此

   

<!---------------------------------------------------------------------------------------->
    <doc-title>小结</doc-title>
    通过本章节，对rpose的代码结构有个初步了解<br>
    实现效果放一边，意会下rpose的姿势优劣，感兴趣或有共鸣，随时继续了解<br>

   
    <doc-footer>Rpose Documents | <a href="https://github.com/gotoeasy/rpose/blob/master/LICENSE" style="text-decoration:none">MIT License</a></doc-footer>

</div>

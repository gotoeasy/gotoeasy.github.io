[view]
<div @class="box-sizing--border-box padding-0_20px_20px_20px">

    <doc-title>内置指令</doc-title>
    为了醒目区别，rpose的全部指令都是以<ui-badge>@</ui-badge>开头<br>
    同时，在指令的数量设计上也做了控制，利于记忆使用<br>
    <br>
    全部指令：<ui-badge type="info">@if</ui-badge>、<ui-badge type="info">@for</ui-badge>
    、<ui-badge type="info">@ref</ui-badge>、<ui-badge type="info">@show</ui-badge>
    、<ui-badge type="info">@taglib</ui-badge>、<ui-badge type="info">@csslib</ui-badge>
    、<ui-badge type="info">@class</ui-badge><br>


<!---------------------------------------------------------------------------------------->
    <doc-title>1.1 指令 @if</doc-title>
    指令<ui-badge>@if</ui-badge>用于控制标签节点是否渲染
```rpose
// demo-at-d1.rpose
\[api]
statekey = role

\[view]
<div>
    <span @if={role === 'admin'}>管理员</span>
    <span @if={role !== 'admin'}>请以管理员身份登录</span>
</div>

\[mount]
body
```

    简单的表达式判断而已，看看效果 <a href="demo/demo-at-d1.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    没有设计所谓的<ui-badge>@else</ui-badge>，没必要<br>
    <br>
    如果要控制多个节点是否渲染，可以使用<ui-badge>{'<if></if>'}</ui-badge>标签


<!---------------------------------------------------------------------------------------->
    <doc-title>1.2 指令 @for</doc-title>
    指令<ui-badge>@for</ui-badge>用于遍历数组，<ui-badge type="error">注意仅适用于数组</ui-badge>，这也是出于精简目的<br>
    完整的写法是<ui-badge>@for="(value, index from i max m) in array"</ui-badge><br>
    根据需要可简化至<ui-badge>@for="value in array"</ui-badge>

```rpose 380px
// demo-at-d2.rpose
\[api]
statekeys = items

\[view]
<div>
    @for="(value, index from 2 max 5) in items"
    <ul>
        <li @for="(value, index from 2 max 5) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value, index max 99 from 1) in items"
    <ul>
        <li @for="(value, index max 99 from 1) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value, index max 4) in items"
    <ul>
        <li @for="(value, index max 4) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value, index from 3) in items"
    <ul>
        <li @for="(value, index from 3) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value, index) in items"
    <ul>
        <li @for="(value, index) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value) in items"
    <ul>
        <li @for="(value) in items">value={value}</li>
    </ul>
    <ui-line/>
    @for="value in items"
    <ul>
        <li @for="value in items">value={value}</li>
    </ul>
</div>

\[state]
{ items: ['foo', 'bar', 'baz', 4, 5, 6] }

\[mount]
body
```

    看看效果 <a href="demo/demo-at-d2.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    如果循环内容含多个节点，可以使用<ui-badge>{'<for>'}</ui-badge>标签


<!---------------------------------------------------------------------------------------->
    <doc-title>1.3 指令 @ref</doc-title>
    和react等是一个意思，设定一个名称，以方便直接引用该组件或节点<br>
    <br>
    <ui-badge type="info">特点1</ui-badge>组件范围内名称不要求唯一，如果重复结果就是一起取到<br>
    <ui-badge type="info">特点2</ui-badge>通过组件内置方法取，而不是refs属性

```rpose 380px
// demo-at-d3.rpose
\[view]
<ul>
    <li><ui-badge @ref="badge">微标1</ui-badge></li>
    <li><ui-badge @ref="badge">微标2</ui-badge></li>
    <li @ref="li"><input @ref="stdtag"></li>
    <li><button @ref="stdtag" onclick="click">按钮</button></li>
</ul>

\[actions]
{
    click: e=> {
        let comp = this.getRefComponent('badge');   // 取指定名的第一个组件
        alert('comp: ' + comp);
        let comps = this.getRefComponents('badge'); // 取指定名的全部组件
        alert('comps: ' + comps);
        let el = this.getRefElement('stdtag');      // 取指定名的第一个节点
        alert('el: ' + el);
        let els = this.getRefElements('stdtag');    // 取指定名的全部节点
        alert('els: ' + els);
        let li = this.getRefElement('li');          // 取指定名的第一个节点
        alert('li: ' + li);
        let ul = this.getRootElement();             // 取当前组件的根节点
        alert('ul: ' + ul);
        console.info(comp, comps, el, els, li, ul);
    }
}

\[mount]
body
```

    看看效果 <a href="demo/demo-at-d3.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    总之，有这么些内置方法配合去取到相应组件或节点



<!---------------------------------------------------------------------------------------->
    <doc-title>1.4 指令 @show</doc-title>
    控制节点是否显示，相对指令<ui-badge>@if</ui-badge>区别在于<ui-badge>@show</ui-badge>总是渲染

```rpose
// demo-at-d4.rpose
\[api]
statekey = role

\[view]
<div>
    <span @show={role === 'admin'}>管理员</span>
    <span @show={role !== 'admin'}>请以管理员身份登录</span>
</div>
```

也是简单的表达式判断而已，看看效果 <a href="demo/demo-at-d4.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
没有所谓的<ui-badge>@hide</ui-badge>，同样没必要<br>
两个span节点都渲染了，只是其中一个为<ui-badge>style="display: none;"</ui-badge><br>

<br>
注意到显示的时候<ui-badge>style="display: block;"</ui-badge><br>
而实际上布局不一定是<ui-badge>block</ui-badge>，所以还支持以修饰符的方式指定显示方式<br>
比如<ui-badge type="info">@show.flex</ui-badge>，这样显示的时候就是<ui-badge>style="display: flex;"</ui-badge>了<br>
<br>
<ui-badge type="error">注意</ui-badge>修饰符有合法性检查，无效修饰符将编译失败

<!---------------------------------------------------------------------------------------->
    <doc-title>1.5 指令 @taglib</doc-title>
    使用第三方组件时，总是require或import ...... 会手酸<br>
    rpose提供指令<ui-badge>@taglib</ui-badge>，以声明方式使用第三方组件

```rpose 380px
// demo-at-d5.rpose
\[view]
<ul>
    <li>
        <this-is-ui-button @taglib="ui-btn=@rpose/ui-button:ui-button">1 this-is-ui-button</this-is-ui-button>
    </li>
    <li>
        <it-is-ui-button @taglib="@rpose/ui-button:ui-button">2 it-is-ui-button</it-is-ui-button>
    </li>
    <li>
        <a-ui-button @taglib="ui-button=@rpose/ui-button">3 a-ui-button</a-ui-button>
    </li>
    <li>
        <at-ui-button @taglib="@ui-button=@rpose/ui-button">4 at-ui-button</at-ui-button>
    </li>
    <li>
        <ui-button @taglib="@rpose/ui-button">5 ui-button</ui-button>
    </li>
    <li>
        <@ui-button @taglib="@rpose/ui-button">6 @ui-button</@ui-button>
    </li>
</ul>
```

先体会一下上面各种不同写法，虽然结果都是使用了同样的第三方组件，看看效果 <a href="demo/demo-at-d5.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
<br>
<ui-badge type="info">@taglib语法：</ui-badge>@taglib="<ui-badge>alias</ui-badge>=<ui-badge>npm-package-name</ui-badge>:<ui-badge>component-name</ui-badge>"<br>
关键是要能确定包名、目标组件名<br>
所以其中的<ui-badge>npm-package-name</ui-badge>不能省略<br>
目标组件名可以由别名或当前标签名提示而得，视情形可以省略<br>
<br>
例子1，完整写法，由于指定了目标组件名，别名实际上被忽视，标签名自行按语义书写<br>
例子2，省略别名，标签名自行按语义书写<br>
例子3，目标组件名根据别名提示确定，标签名自行按语义书写<br>
例子4，同上，为说明标签名有默认@前缀支持<br>
例子5，目标组件名根据当前标签名提示确定<br>
例子6，同上，为说明标签名有默认@前缀支持<br>
<br>
<br>
<ui-badge type="error">标签名限制1</ui-badge>不能使用标准标签名，比如<ui-badge>div</ui-badge>或<ui-badge>span</ui-badge>，以免引起混淆<br>
<ui-badge type="error">标签名限制2</ui-badge>不能使用当前工程内已有组件名，同样是为避免混淆<br>
比如已有<ui-badge>ui-button.rpose</ui-badge>文件时，上面<ui-badge>{'<ui-button @taglib="...">'}</ui-badge>将会编译失败<br>
为了解决这个冲突，又能达到醒目提示的目的，标签名可以加上前缀<ui-badge>@</ui-badge>，比如上面的<ui-badge>@ui-button</ui-badge><br>

<br>
设计上给予<ui-badge>@taglib</ui-badge>所在标签名更多的语义灵活性，你可以根据实际需要取名<br>
比如上面的<ui-badge>this-is-ui-button</ui-badge><br>
通常若无特别语义要求，推荐使用@前缀标签名写法，如上面的<ui-badge>@ui-button</ui-badge><br>

<br>
<ui-badge type="info">提示</ui-badge><br>
指令<ui-badge>@taglib</ui-badge>仅适用于当前标签<br>
标签库的目的是为方便使用第三方组件，更多用法在 <router-link path="taglib" title="标签库">标签库</router-link> 中有专节介绍

<!---------------------------------------------------------------------------------------->
    <doc-title>1.6 指令 @csslib</doc-title>
    指令<ui-badge>@csslib</ui-badge>是个样式库的概念<br>
    历史原因众多框架遗留了很多样式，弃之不用非常可惜，样式库思路的目的之一就是把它们复用起来<br>
    <br>
    <ui-badge type="info">特点</ui-badge>就是把既有样式当库使用，而且是按需使用

```rpose
// demo-at-d6-1.rpose
\[view]
<button type="button" class="btn@bs btn-primary@bs" @csslib="bs=bootstrap:**.min.css">
    this is a bootstrap primary button
</button>
```

    这样就是创建了一个bootstrap button，看看效果 <a href="demo/demo-at-d6-1.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    查看源码可知，所需样式会自动引用，用不到的没有引用，好姿势<br>
    <br>
    <ui-badge type="info">@csslib语法：</ui-badge>@csslib="<ui-badge>alias</ui-badge>=<ui-badge>npm-package-name</ui-badge>:<ui-badge>filter</ui-badge>"<br>
    比如例子中的<ui-badge>bs=bootstrap:**.min.css</ui-badge><br>
    意思就是，导入bootstrap包中任意以<ui-badge>.min.css</ui-badge>结尾的样式作为一个样式库，别名起为<ui-badge>bs</ui-badge><br>
    然后，就可以使用别名来写样式名了，像上面的<ui-badge>btn@bs</ui-badge><br>

    <br>
    <br>
    <ui-badge type="info">文件过滤器可以省略</ui-badge><br>
    文件过滤器中，单个<ui-badge>*</ui-badge>代表任意文件名，两个<ui-badge>**</ui-badge>代表任意目录任意文件名
    过滤器缺省为<ui-badge>**.min.css</ui-badge>，如下例子，看效果 <a href="demo/demo-at-d6-2.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
```rpose
// demo-at-d6-2.rpose
\[view]
<button type="button" class="btn@bs btn-primary@bs" @csslib="bs=bootstrap">
    @csslib="bs=bootstrap"
</button>
```
    
    <br>
    <br>
    <ui-badge type="info">别名也可以省略</ui-badge><br>
```rpose
// demo-at-d6-3.rpose
\[view]
<button type="button" class="btn btn-primary" @csslib="bootstrap">
    @csslib="bootstrap"
</button>
```
    看看效果 <a href="demo/demo-at-d6-3.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    
    <br>
```rpose
// demo-at-d6-4.rpose
\[view]
<button type="button" class="btn btn-primary" @csslib="*=bootstrap">
    @csslib="*=bootstrap"
</button>
```
    别名缺省时实际等同于<ui-badge>*</ui-badge>，看看效果<a href="demo/demo-at-d6-4.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>

    <br>
    <br>
    <ui-badge type="danger">@csslib仅对当前标签有效</ui-badge><br>
    也就是说，你应当清楚，你要的仅仅是当前标签当前样式类的相关样式<br>
```rpose
// demo-at-d6-5.rpose
\[view]
<ul>
    <li>
        <button type="button" class="btn btn-primary" @csslib="bootstrap">
            this is a bootstrap primary button
        </button>
    </li>
    <li>
        <button type="button" class="btn btn-primary">
            this is a simple button
        </button>
    </li>
</ul>
```
这个效果应该是第二个按钮的样式和bootstrap无关 <a href="demo/demo-at-d6-5.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>

    <br>
    <br>
    <ui-badge type="danger">指令 @csslib 使用注意点</ui-badge><br>
    <ui-badge type="info">1</ui-badge>推荐使用别名，像上面例子虽然样式名一样但效果却不同，容易令人困惑<br>
    <ui-badge type="info">2</ui-badge>样式库别名不能重复，否则编译失败<br>
    <ui-badge type="info">3</ui-badge>别名和<ui-badge>[csslib]</ui-badge>定义不能有冲突，否则编译失败<br>
    <br>
    在 <router-link path="csslib" title="样式库">样式库</router-link> 中有关于样式库的专节介绍



<!---------------------------------------------------------------------------------------->
    <doc-title>1.7 指令 @class</doc-title>
    关于样式还有一种原子化写法，能精细控制，很有趣<br>
    就像写内联style一样一个一个写，最终会生成为css

```rpose
// demo-at-d7-1.rpose
\[view]
<div @class="height-50vh display-flex flex-direction-column overflow-hidden color-#333">
    <div @class="height-50px color-#fff bgcolor-#555">Header</div> 
    <div @class="height--calc(50vh_-_80px) bgcolor-#eee">Main</div> 
    <div @class="height-30px bgcolor-#d5d5d5">Footer</div> 
</div> 
```rpose

就是这样，看效果 <a href="demo/demo-at-d7-1.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
想随手直接写写时会很方便<br>

    <br>
    <br>
    <ui-badge type="info">原子化 @class 写法特点</ui-badge><br>
    如果只能图个随手方便，那也许没有设计必要<br>
    这个指令的重要特点是能在编译期<ui-badge type="danger">动态生成样式</ui-badge><br>

```rpose
// demo-at-d7-2.rpose
// 在animate.css上有个动画例子，延迟2秒后开始动画
// <h1 class="animated infinite bounce delay-2s">Example</h1>
// 这里简单加上@csslib="animate.css"，让它跑起来看看效果
\[view]
<h1 class="animated infinite bounce delay-2s" @csslib="animate.css">Example</h1>
```rpose

    点击看看效果 <a href="demo/demo-at-d7-2.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    <br>
    想自定义修改吗？如果你想改这个动画时间为2.345秒，会有点费劲，因为它没有默认提供得自己写<br>
    <br>
    但使用<ui-badge>@class</ui-badge>可就简单极了

```rpose
\[view]
<h1 class="animated infinite bounce delay-2s" @csslib="animate.css"
    @class="animation-duration-2.345s">Example</h1>
```

    很直观，根据需要你可以改为1280ms或789ms之类<br>
    任性调整到你满意为止，看看效果 <a href="demo/demo-at-d7-3.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>



    <br>
    <br>
    <ui-badge type="danger">指令 @class 使用注意点</ui-badge><br>
    <ui-badge type="info">1</ui-badge>优先以第一个<ui-badge>--</ui-badge>作为分割点拆解得属性和属性值<br>
    <ui-badge type="info">2</ui-badge>没有<ui-badge>--</ui-badge>时以最后一个<ui-badge>-</ui-badge>作为分割点拆解<br>
    <ui-badge type="info">3</ui-badge>属性值包含空格时，空格固定用下划线<ui-badge>_</ui-badge>替换<br>


<!---------------------------------------------------------------------------------------->
    <doc-title>小结</doc-title>
    本章节介绍了rpose的全部指令用法<br>
    <ui-badge>@taglib</ui-badge>、<ui-badge>@csslib</ui-badge>、<ui-badge>@class</ui-badge>都是很有特色的指令<br>
   
    <doc-footer>Rpose Documents | <a href="https://github.com/gotoeasy/rpose/blob/master/LICENSE" style="text-decoration:none">MIT License</a></doc-footer>

</div>

[view]
<div @class="box-sizing--border-box padding-0_20px_20px_20px">

    <doc-title>样式库</doc-title>
    关于样式，历来实在太多痛点<br>
    <ui-badge>命名冲突</ui-badge>首当其冲，<ui-badge>难以复用</ui-badge>悬而未决<br>
    <br>
    类似BEM、CSS Modules、CSS in Js，等等都姿势不美，众人都在不断尝试<br>
    <br>
    比较理想的是<br>
    命名应该在组件范围内，可以任性的使用语义化名称<br>
    CSS是天然的声明式语言，千万个不乐意改成命令式编程方式，需要还是声明式<br>
    众多历史遗留框架样式，希望都能方便的复用起来，而不是不断改写重写<br>
    <br>
    rpose创建样式库概念，试图以此解决以上关键问题<br>
    概念上，是把众多现存样式看作一个库，然后按需引入使用，同时解决命名问题<br>


<!---------------------------------------------------------------------------------------->
    <doc-title>1.1 使用 @csslib 指令</doc-title>
    以流行的bootstrap按钮为例，直接看效果 <a href="demo/demo-csslib-d1.html" target="_blank"><svgicon name="link" fill="blue"/></a>
```rpose
// demo-csslib-d1.rpose
\[view]
<ul>
    <li><a href="#" class="btn@bs btn-secondary@bs btn-lg@bs active@bs" @csslib="bs=bootstrap">Link</a></li>
    <li><button type="button" class="btn@bootstrap btn-warning@bootstrap" @csslib="bootstrap=bootstrap:**.min.css">Warning</button></li>
</ul>

\[mount]
body
```

    仅此而已，想用bootstrap，按其例子略微改写就行<br>
    由于已经表达了所要引入的样式文件，以及使用到样式类，所以，剩下的事就可以都让框架去完成<br>
    <br>
    当然多库混用时，最好都取个别名，以减少不必要的冲突可能，也能提高可读性<br>
    指令<ui-badge>@csslib</ui-badge>适用于简单的单个标签使用，详细用法在 <router-link path="at" title="内置指令集">内置指令集</router-link> 有专节介绍


<!---------------------------------------------------------------------------------------->
    <doc-title>1.2 使用组件 [csslib] 配置</doc-title>
    组件内可以配置<ui-badge>[csslib]</ui-badge>，便于在组件范围内统一使用样式库
```rpose 380px
// demo-csslib-d2.rpose
\[view]
<nav aria-label="...">
  <ul class="pagination">
    <li class="page-item disabled">
      <span class="page-link">Previous</span>
    </li>
    <li class="page-item"><a class="page-link" href="#">1</a></li>
    <li class="page-item active">
      <span class="page-link">
        2
        <span class="sr-only">(current)</span>
      </span>
    </li>
    <li class="page-item"><a class="page-link" href="#">3</a></li>
    <li class="page-item">
      <a class="page-link" href="#">Next</a>
    </li>
  </ul>
</nav>

\[csslib]
* = bootstrap

\[mount]
body
```

    这个是直接抄写bootstrap官网例子，仅加了个<ui-badge>[csslib]</ui-badge>配置，看看效果 <a href="demo/demo-csslib-d2.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    还是那句话，表达好要引入的样式文件，以及使用到样式类，剩下的事交由框架去做吧<br>
    <br>
    <br>
    <ui-badge type="danger">[csslib]语法</ui-badge><ui-badge>alias</ui-badge>=<ui-badge>pkg-or-dir</ui-badge>:<ui-badge>filter</ui-badge><br>
    <ui-badge type="info">规则1</ui-badge>别名alias不能省略，用<ui-badge>*</ui-badge>时，代表适用于组件内的全部普通样式类(无@别名后缀)<br>
    <ui-badge type="info">规则2</ui-badge>pkg-or-dir用<ui-badge>~</ui-badge>前缀时代表工程根目录开始的本地目录，否则指npm包名<br>
    <ui-badge type="info">规则3</ui-badge>过滤器filter可以省略，缺省时等同<ui-badge>**.min.css</ui-badge><br>
    　　　多个过滤器可以用逗号<ui-badge>,</ui-badge>或分号<ui-badge>;</ui-badge>分隔<br>
    　　　支持通配符，用<ui-badge>?</ui-badge>代表任意单一字符，<ui-badge>*</ui-badge>代表不跨目录的任意字符，<ui-badge>**</ui-badge>代表任意目录任意字符<br>
    <ui-badge type="info">规则4</ui-badge>一行一个csslib配置，支持注释符<ui-badge>//</ui-badge><br>
    <ui-badge type="info">规则5</ui-badge>别名不能重复<br>


<!---------------------------------------------------------------------------------------->
    <doc-title>1.3 按需复用各框架样式</doc-title>
    继续写个例子，使用uikit的Card组件，在里面放置上面bootstrap的pagination组件
```rpose 380px
// demo-csslib-d3.rpose
\[view]
<div class="uk-card@uk uk-card-default@uk uk-card-body@uk uk-width-3-4@uk">
    <h3 class="uk-card-title@uk">pagination in uk-card</h3>

    <nav aria-label="...">
      <ul class="pagination">
        <li class="page-item disabled">
          <span class="page-link">Previous</span>
        </li>
        <li class="page-item"><a class="page-link" href="#">1</a></li>
        <li class="page-item active">
          <span class="page-link">
            2
            <span class="sr-only">(current)</span>
          </span>
        </li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
        <li class="page-item">
          <a class="page-link" href="#">Next</a>
        </li>
      </ul>
    </nav>
</div>

\[csslib]
* = bootstrap
uk = uikit

\[mount]
body
```

    代码虽然有点多了，但那都是框架官方例子，rpose做的只是配置一个<ui-badge>[csslib]</ui-badge><br>
    当然，在指定别名时需要把类名相应的加上别名后缀，看看效果 <a href="demo/demo-csslib-d3.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
    <br>
    就是这样，可以把多个不同框架样式联合起来一起用<br>
    突然之间，世界变得更加广大自由的感觉



<!---------------------------------------------------------------------------------------->
    <doc-title>1.4 使用工程 [csslib] 配置</doc-title>
    配置的方式没什么两样<br>
    区别在于，工程上的 [csslib] 配置，可供整个工程项目内的全部组件使用<br>
    <br>
    例子大同小异，省略
    <br>
    同样的要求，自身配置不能有别名冲突，也不能和组件配置有别名冲突

<!---------------------------------------------------------------------------------------->
    <doc-title>1.5 配置本地样式库</doc-title>
    除了npm包，还可以把本地目录中的样式文件配置成样式库使用<br>
```rpose 380px
// demo-csslib-d5.rpose
\[view]
<form class="pure-form pure-form-aligned">
    <fieldset>
        <div class="pure-control-group">
            <label for="name">Username</label>
            <input id="name" type="text" placeholder="Username">
            <span class="pure-form-message-inline">This is a required field.</span>
        </div>

        <div class="pure-control-group">
            <label for="password">Password</label>
            <input id="password" type="password" placeholder="Password">
        </div>

        <div class="pure-control-group">
            <label for="email">Email Address</label>
            <input id="email" type="email" placeholder="Email Address">
        </div>

        <div class="pure-control-group">
            <label for="foo">Supercalifragilistic Label</label>
            <input id="foo" type="text" placeholder="Enter something here...">
        </div>

        <div class="pure-controls">
            <label for="cb" class="pure-checkbox">
                <input id="cb" type="checkbox"> I've read the terms and conditions
            </label>

            <button type="submit" class="pure-button pure-button-primary">Submit</button>
        </div>
    </fieldset>
</form>

\[csslib]
* = ~resources/csslibs/pure:pure.css

\[mount]
body
```

    这个例子直接从purecss官网复制，只是加了一个本地样式库配置<br>
    下载pure.css存放到本地，以<ui-badge>~</ui-badge>开头指定目录即可，看效果 <a href="demo/demo-csslib-d5.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>


<!---------------------------------------------------------------------------------------->
    <doc-title>1.6 自动转换脚本中的样式名</doc-title>
    在js脚本代码中也可以使用样式库的相关样式类名<br>
    下面例子按Submit会提示勾选，按Toggle会切换排版，看效果 <a href="demo/demo-csslib-d6.html" target="_blank"><svgicon name="link" fill="blue"/></a><br>
```rpose 380px
// demo-csslib-d6.rpose
\[view]
<form class="pure-form pure-form-aligned" onsubmit="fnSubmit">
    <fieldset>
        <div class="pure-control-group">
            <label for="name">Username</label>
            <input id="name" type="text" placeholder="Username">
            <span class="pure-form-message-inline">This is a required field.</span>
        </div>

        <div class="pure-control-group">
            <label for="password">Password</label>
            <input id="password" type="password" placeholder="Password">
        </div>

        <div class="pure-control-group">
            <label for="email">Email Address</label>
            <input id="email" type="email" placeholder="Email Address">
        </div>

        <div class="pure-control-group">
            <label for="foo">Supercalifragilistic Label</label>
            <input id="foo" type="text" placeholder="Enter something here...">
        </div>

        <div class="pure-controls">
            <label for="cb" class="pure-checkbox">
                <input id="cb" type="checkbox"> I've read the terms and conditions
            </label>

            <button type="submit" class="pure-button pure-button-primary">Submit</button>
            <button type="button" class="pure-button" style="margin-left:20px" onclick="fnToggle">Toggle</button>
        </div>
    </fieldset>
</form>

\[actions]
{
    fnToggle: e => {
        // 这里的 pure-form-stacked 虽然只在js中，由于能在样式库中找到，所以相关样式也会被自动引用
        $$('.pure-form').toggleClass('pure-form-aligned').toggleClass('pure-form-stacked');
    },
    fnSubmit: e => {
        e.preventDefault();
        let el = this.getRootElement().querySelector('.pure-checkbox > input');
        if ( !el.checked ) {
            alert('read the terms and conditions please');
        }
    }
}

\[csslib]
* = ~resources/csslibs:pure/pure.css

\[mount]
body
```

    注意到，第一，仅仅出现在js中的样式类，如果能在样式库中找到，相关样式也同样是会被自动引用，所以这个例子是能切换效果的<br>
    第二点，在js中可以使用常用的api去查询样式类，如querySelector、querySelectorAll、getElementsByClassName等，rpose会自动判断并调整样式类名，很透明的体验

<!---------------------------------------------------------------------------------------->
    <doc-title>1.7 样式库不是万能的</doc-title>
    样式库的最重要特点<ui-badge>按需复用</ui-badge>已有样式<br>
    然而，已有样式的实现方式、编写规范等等都是不受控制的<br>
    所以，样式库并不是万能的<br>
    <br>
    比如，输入样式依赖id或标签选择器去实现效果，那会容易冲突<br>
    又比如，输入样式是依赖class属性选择器去实现，那就如同硬编码了样式类名，这和样式库自动调整类名的思路矛盾，极可能会导致结果和预想不符<br>
    <br>
    <br>
    幸好，大部分已有样式还是很规矩，大多能直接用<br>
    对于喜欢的样式，个别细节也还可以修改保存为本地样式库使用<br>
    <br>
    扬长避短便是

<!---------------------------------------------------------------------------------------->
    <doc-title>小结</doc-title>
    样式库是rpose中的重要特性<br>
    在保持声明式的前提下，同时解决突出的命名冲突和样式复用问题<br>
    并且，可以方便的同时整合使用多方样式框架，如同用的是个样式库一样
   
    <doc-footer>Rpose Documents | <a href="https://github.com/gotoeasy/rpose/blob/master/LICENSE" style="text-decoration:none">MIT License</a></doc-footer>

</div>

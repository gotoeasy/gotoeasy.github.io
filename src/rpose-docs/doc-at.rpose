[view]
<div @class="box-sizing--border-box padding-0_20px_20px_20px">

    <doc-title>内置指令</doc-title>
    为了醒目区别，rpose的全部指令都是以<ui-badge>@</ui-badge>开头<br>
    同时，在指令的数量设计上也做了控制，避免过度发挥，不利于记忆使用


<!---------------------------------------------------------------------------------------->
    <doc-title>5.1 指令 @if</doc-title>
    指令<ui-badge>@if</ui-badge>用于控制标签节点是否渲染
```rpose
// demo-at-d1.rpose
\[api]
statekey = role

\[view]
<div>
    <span @if={role === 'admin'}>管理员</span>
    <span @if={role !== 'admin'}>请以管理员身份登录</span>
</div>

\[mount]
body
```

    简单的表达式判断而已，看看效果 <a href="demo/demo-at-d1.html" target="_blank"><svgicon src="link" fill="blue"/></a><br>
    没有设计所谓的<ui-badge>@else</ui-badge>，没必要<br>
    <br>
    如果要控制多个节点是否渲染，可以使用<ui-badge>{'<if></if>'}</ui-badge>标签


<!---------------------------------------------------------------------------------------->
    <doc-title>5.2 指令 @for</doc-title>
    指令<ui-badge>@for</ui-badge>用于遍历数组，<ui-badge type="error">注意仅适用于数组</ui-badge>，这也是出于精简目的<br>
    完整的写法是<ui-badge>@for="(value, index from i max m) in array"</ui-badge><br>
    根据需要可简化至<ui-badge>@for="value in array"</ui-badge>

```rpose 380px
// demo-at-d2.rpose
\[api]
statekeys = items

\[view]
<div>
    @for="(value, index from 2 max 5) in items"
    <ul>
        <li @for="(value, index from 2 max 5) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value, index max 99 from 1) in items"
    <ul>
        <li @for="(value, index max 99 from 1) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value, index max 4) in items"
    <ul>
        <li @for="(value, index max 4) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value, index from 3) in items"
    <ul>
        <li @for="(value, index from 3) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value, index) in items"
    <ul>
        <li @for="(value, index) in items">value={value}，index={index}</li>
    </ul>
    <ui-line/>
    @for="(value) in items"
    <ul>
        <li @for="(value) in items">value={value}</li>
    </ul>
    <ui-line/>
    @for="value in items"
    <ul>
        <li @for="value in items">value={value}</li>
    </ul>
</div>

\[state]
{ items: ['foo', 'bar', 'baz', 4, 5, 6] }

\[mount]
body
```

    看看效果 <a href="demo/demo-at-d2.html" target="_blank"><svgicon src="link" fill="blue"/></a><br>
    如果循环内容包含多个节点，可以使用<ui-badge>{'<for></for>'}</ui-badge>标签


<!---------------------------------------------------------------------------------------->
    <doc-title>5.3 指令 @ref</doc-title>
    和react等是一个意思，设定一个名称，以方便直接引用该组件或节点<br>
    <br>
    <ui-badge type="info">特点1</ui-badge>组件范围内名称不要求唯一，如果重复结果就是一起取到<br>
    <ui-badge type="info">特点2</ui-badge>通过组件内置方法取，而不是refs属性

```rpose 380px
// demo-at-d3.rpose
\[view]
<ul>
    <li><ui-badge @ref="badge">微标1</ui-badge></li>
    <li><ui-badge @ref="badge">微标2</ui-badge></li>
    <li @ref="li"><input @ref="stdtag"></li>
    <li><button @ref="stdtag" onclick="click">按钮</button></li>
</ul>

\[actions]
{
    click: e=> {
        let comp = this.getRefComponent('badge');   // 取指定名的第一个组件
        alert('comp: ' + comp);
        let comps = this.getRefComponents('badge'); // 取指定名的全部组件
        alert('comps: ' + comps);
        let el = this.getRefElement('stdtag');      // 取指定名的第一个节点
        alert('el: ' + el);
        let els = this.getRefElements('stdtag');    // 取指定名的全部节点
        alert('els: ' + els);
        let li = this.getRefElement('li');          // 取指定名的第一个节点
        alert('li: ' + li);
        let ul = this.getRootElement();             // 取当前组件的根节点
        alert('ul: ' + ul);
        console.info(comp, comps, el, els, li, ul);
    }
}

\[mount]
body
```

    看看效果 <a href="demo/demo-at-d3.html" target="_blank"><svgicon src="link" fill="blue"/></a><br>
    总之，就是有这么些内置方法配合去取到相应组件或节点



<!---------------------------------------------------------------------------------------->
    <doc-title>5.4 指令 @show</doc-title>
    控制节点是否显示，相对指令<ui-badge>@if</ui-badge>区别在于<ui-badge>@show</ui-badge>总是渲染

```rpose
// demo-at-d4.rpose
\[api]
statekey = role

\[view]
<div>
    <span @show={role === 'admin'}>管理员</span>
    <span @show={role !== 'admin'}>请以管理员身份登录</span>
</div>
```

也是简单的表达式判断而已，看看效果 <a href="demo/demo-at-d4.html" target="_blank"><svgicon src="link" fill="blue"/></a><br>
没有所谓的<ui-badge>@hide</ui-badge>，同样没必要<br>
两个span节点都渲染了，只是其中一个为<ui-badge>style="display: none;"</ui-badge><br>

<br>
注意到显示的时候<ui-badge>style="display: block;"</ui-badge><br>
而实际上布局不一定是<ui-badge>block</ui-badge>，所以还支持以修饰符的方式指定显示方式<br>
比如<ui-badge type="info">@show.flex</ui-badge>，这样显示的时候就是<ui-badge>style="display: flex;"</ui-badge>了<br>
<br>
<ui-badge type="error">注意</ui-badge>修饰符有合法性检查，使用无效修饰符将编译失败

<!---------------------------------------------------------------------------------------->
    <doc-title>5.5 指令 @taglib</doc-title>
    使用第三方组件时，总是require或import ...... 会手酸<br>
    rpose提供指令<ui-badge>@taglib</ui-badge>，以声明的方式使用第三方组件

```rpose
// demo-at-d5.rpose
\[view]
<ul>
    <li>
        <this-is-ui-button @taglib="@rpose/ui-button:ui-button">this-is-ui-button</this-is-ui-button>
    </li>
    <li>
        <ui-button @taglib="@rpose/ui-button">ui-button</ui-button>
    </li>
    <li>
        <@ui-button @taglib="@rpose/ui-button">@ui-button</@ui-button>
    </li>
</ul>
```

先体会一下上面各种不同写法，虽然结果都是使用了同样的第三方组件，看看效果 <a href="demo/demo-at-d5.html" target="_blank"><svgicon src="link" fill="blue"/></a><br>
<br>
<ui-badge type="info">@taglib语法：</ui-badge>@taglib="<ui-badge>npm-package-name</ui-badge>:<ui-badge>component-name</ui-badge>"<br>
如果当前标签名和要引用的组件标签名一样，则可以省略为 @taglib="<ui-badge>npm-package-name</ui-badge>"<br>
比如上面的<ui-badge>{'<ui-button @taglib="@rpose/ui-button">'}</ui-badge><br>
<br>
<ui-badge type="error">标签名限制1</ui-badge>不能使用标准标签名，比如<ui-badge>div</ui-badge>或<ui-badge>span</ui-badge>，以免引起混淆<br>
<ui-badge type="error">标签名限制2</ui-badge>不能使用当前工程内已有组件名，同样是为避免混淆<br>
比如已有<ui-badge>ui-button.rpose</ui-badge>文件时，上面<ui-badge>{'<ui-button @taglib="...">'}</ui-badge>将会编译失败<br>
为了解决这个冲突，又能达到醒目提示的目的，标签名可以加上前缀<ui-badge>@</ui-badge>，比如上面的<ui-badge>@ui-button</ui-badge><br>

<br>
设计上给予<ui-badge>@taglib</ui-badge>所在标签名更多的语义灵活性，你可以根据实际需要取名<br>
比如上面的<ui-badge>this-is-ui-button</ui-badge><br>
通常若无特别语义要求，推荐使用@前缀标签名写法，如上面的<ui-badge>@ui-button</ui-badge><br>

<br>
<ui-badge type="info">提示</ui-badge><br>
指令<ui-badge>@taglib</ui-badge>仅对当前所在标签有效<br>
标签库的目的是为方便使用第三方组件，更多用法在 <router-link path="taglib" title="标签库">标签库</router-link> 中有专节介绍

<!---------------------------------------------------------------------------------------->
    <doc-title>5.6 指令 @csslib</doc-title>


<!---------------------------------------------------------------------------------------->
    <doc-title>5.7 指令 @class</doc-title>


<!---------------------------------------------------------------------------------------->
    <doc-title>小结</doc-title>

   
    <doc-footer>青松 2019.05</doc-footer>

</div>

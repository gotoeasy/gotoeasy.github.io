[view]
<div>
    <ui-navbar />
    <ui-sidemenu />
    <div class="main">

<ui-blockquote text="3.1 内置组件 —— 代码块语法高亮组件"/>
免不了要展示代码，吸收md格式写法的便利性，再加上highlight.js的API，rpose就这样内置了一个组件<br>
目前整合得还不够智能，有空会改善，但已基本能用，仿md写法嘛，很简单的
```rpose
// 代码块语法高亮，例子1
\[view]
\```
var hello = name => 'Hello ' + name + '!';
\```
```
效果：
```
var hello = name => 'Hello ' + name + '!';
```

<br>
<br>
继续，效果就免了，仅小小区别
```
// 例子2，加上语言，和md一样
\```js
var hello = name => 'Hello ' + name + '!';
\```



// 例子3，代码很多行的时候，得限制最大高度
\```js max-height=50px  // 事实上写法比较随意，比如其实这样写也是一样的 ```js 50px
var hello = name => 'Hello ' + name + '!';

    ...
    ...
    ...

\```
```



<ui-line/>
<ui-blockquote text="3.2 本文使用的分隔行组件"/>
这个组件概念上等同于无状态组件，因为没有声明statekeys的具体项，状态无法修改
```
// 文件名 ui-line.rpose

\[api]
optionkeys = height, width, color, margin

\[view]
<div style="background-color:{color};height:{height};width:{width};margin:{margin}"></div>

\[options]
{
    height: '1px',
    width: '98%',
    color: '#e6e6e6',
    margin: '20px auto 20px auto',
}

// 用法，比如这样用：<ui-line/>，或是这样用：<ui-line height="3px" width="50%" color="#ff9408"/>
```


<ui-line/>
<ui-blockquote text="3.3 简单的按钮组件"/>
这个按钮组件能修改状态<br>
通过statekeys声明看出，仅有value和disabled能改，也就是只能改按钮文字以及是否禁用
```rpose 300px
// 文件名 ui-button.rpose

\[api]
optionkeys = onclick
statekeys  = value, disabled

\[view]
<button onclick={$options.onclick} class="ui-button" disabled={!!$state.disabled}>{$state.value}</button>

\[less]
.ui-button {
    min-width: @theme-button-min-width;
    height: @theme-button-height;
    border: 1px solid #999999;
    font-weight: bold;
    border-radius: 3px;
    color: #333333;
    background: @theme-button-bg;
}

.ui-button:hover:not([disabled]),
.ui-button:focus{
    background: @theme-button-bg-hover;
}

.ui-button:active:not([disabled]){
    background: @theme-button-bg-active;
}

.ui-button[disabled]{
    background: @theme-button-bg-disabled;
    opacity: 0.6;
    cursor: not-allowed;
}
```

出现了新要点，less样式里面用到了变量，比如@theme-button-min-width等，怎么来的？<br>
这关系到一个统一性思想，都各自写非常细化的独立组件，统一性又怎么解决？<br>
对于样式风格，抽象后本质上是统一使用变量，rpose把theme变量独立出来发布成npm包来用<br>
通过这种方式，解决样式风格统一性问题，也让风格的统一修改变得更直观更直接<br>
<br>
目前是点到即止，仅尝试几个变量，有机会再完善，但即使目前想要扩充也是很方便的<br>
具体例子看两个包： @gotoeasy/theme 和 rpose-theme-demo<br>
@gotoeasy/theme的目的是统一变量名，rpose-theme-demo则是个性化变量值，也可以添加个性变量<br>
本例的变量就是从rpose-theme-demo包中得来的


<ui-line/>
<ui-blockquote text="3.4 组装几个按钮到页面看效果"/>
```rpose 300px
// 文件名 p103-demo-component-p3d4.rpose

\[view]
<div class="warp">
    <ul>
        <li>{$state.msg}</li>
        <li><ui-button onclick="btn1Click" value="按钮1"/></li>
        <li><ui-button onclick="btn2Click" value="按钮2"/></li>
        <li><ui-button onclick="btn3Click" @ref="btn3" value="模拟重试"/></li>
    </ul>
</div>

\[state]
{
  msg:'点击按钮看效果',
  cnt1:0,
  cnt2:0,
}

\[actions]
{
    btn1Click: e=>{
        this.$state.cnt1++;
        this.$state.msg = '点击按钮1，共 ' + this.$state.cnt1 + ' 次';
        this.render();
    },
    btn2Click: function(e){
        this.$state.cnt2++;
        this.$state.msg = '点击按钮2，共 ' + this.$state.cnt2 + ' 次';
        this.render();
    },
    btn3Click: function(e){

        let sec = 5;
        let btn3 = this.getRefComponent("btn3");
       
        btn3.setState({disabled:true, value: sec-- + '秒后重试'});
        let tid = setInterval(()=>{
            btn3.setState({disabled:true, value: sec-- + '秒后重试'});
            if (sec < 0 ){
                clearInterval(tid);
                btn3.setState({disabled:false, value:'模拟重试'});
            }
        }, 1000);
    },
}

\[css]
.warp li{
    margin: 20px;
}

\[mount]
body
```

看效果点 <a href="p103-demo-component-p3d4.html" target="_blank">这里</a><br>
<br>
也是有要点的<br>
没有[api]声明可变属性，也就是不让外面修改，但内部自己当然是可以改state的，改完之后调用了组件的内置方法render重绘<br>
主要是那个[actions]里面有function啊，function用了this，但function却没有bind(this)！？<br>
<br>
确实，不管习惯上或事实上，都是让this指向组件对象，rpose也是这样，this一定是本组件对象<br>
既然如此，为什么还要写bind(this)呢？写bind(this)不过是再次强调，this就是本组件自己<br>
我不喜欢这种啰嗦的姿势，更怕万一漏写而导致出bug，所以rpose选择自动把function改成了箭头函数，放心的使用this吧<br>



<ui-line/>

        <ui-blockquote text="3.5 小结"/>
        通过本章节，对rpose的代码写法就快接近熟练了<br>
        [api]声明选项配置项、声明状态可变项，不是使用时能乱改的<br>
        [view]就像html，模板语法很大众，免试入门<br>
        [actions]写事件函数，一个个js方法，没有特别的技术要求<br>
        [css]或[less]或[scss]写样式，样式的众多顾虑问题，rpose都帮忙铲除，还提供了theme风格方案<br>
        组件，有那么些内置方法如getState、setState、getRefComponent、getRefElement、render等<br>
        <br>
        目前为止，已经能应付大部分的功能实现了，当然还有所谓的高级一点的<br>
        不常用的可以先放放，那么，有兴趣就可以开始动手尝试了<br>


<ui-line/>
        <ui-button value="2 第一个 hello world 组件" onclick="pre" />
        <span style="margin:0 80px 0 0"></span>
        <ui-button value="4 安装，体验使用rpose" onclick="next" />
    </div>


<ui-line/>
    <div style="text-align:center;margin-bottom:20px">青松 2018.12</div>

</div>

[actions]
{
    pre:e=>{
        location.href = 'p102-demo-helloworld.html';
    },
    next:e=>{
        location.href = 'p104-demo-setup.html';
    },
}


[mount]
body

[css]
body{
	margin: 0;
    background-color: #F9F9F9;
}

.main{
	margin: 15px;
}
